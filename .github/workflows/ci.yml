name: CI Build Docker

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    environment: env
    env:
      DEBUG: ${{ secrets.DEBUG }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
      SQL_ENGINE: ${{ secrets.SQL_ENGINE }}
      SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
      SQL_USER: ${{ secrets.SQL_USER }}
      SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
      SQL_HOST: ${{ secrets.SQL_HOST }}
      SQL_PORT: ${{ secrets.SQL_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      PGDATA: ${{ secrets.PGDATA }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Write env.dev
        run: |
          cat <<EOF > env.dev
          DEBUG=${DEBUG}
          SECRET_KEY=${SECRET_KEY}
          DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
          SQL_ENGINE=${SQL_ENGINE}
          SQL_DATABASE=${SQL_DATABASE}
          SQL_USER=${SQL_USER}
          SQL_PASSWORD=${SQL_PASSWORD}
          SQL_HOST=${SQL_HOST}
          SQL_PORT=${SQL_PORT}
          EOF
      
      - name: Write env.db
        run: |
          cat <<EOF > env.db
          POSTGRES_USER=${POSTGRES_USER}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          POSTGRES_DB=${POSTGRES_DB}
          PGDATA=${PGDATA}
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and start containers
        run: |
          docker compose --env-file env.dev --env-file env.db -f docker-compose.yml build
          docker compose --env-file env.dev --env-file env.db -f docker-compose.yml up -d
          
      - name: Start web container
        run: docker compose -f docker-compose.yml up -d web

      - name: Test health endpoint
        run: |
          sleep 5
          curl --fail http://localhost:80/health/

      - name: Teardown
        run: docker compose --env-file env.dev --env-file env.db -f docker-compose.yml down